PROGRAM
  notify "global "varchange
  trace [global safe display square]
  make "box "square
  make "global 123
  make "redirect "global
  ;openwrite "foo.txt
  ;setwrite "foo.txt
  print [lo lo lo writer:] writer
  ;openread "tests/suite/syntax-print.logo
  ;print [from syntax print:] (readbytes 7.3 "tests/suite/syntax-print.logo) [111 222 333] reader
  show (LIST [a b c] :global [more lists] "word [numbers 1 2 3] 1 2 3)
  show shell "date
  ;print setitem 1 [[[1 2 3] [4 5 6] [7 8 9]] [[11 12 13] [14 15 16] [17 18 19]] [[21 22 23] [24 25 26] [27 28 29]]] "Poof
  test # :arguments > 2
  print reverse :arguments
  ift [make "global item 2 :arguments]
  (print "new\ global :global)
  (standout uppercase "wait...\  on\  time)
  wait 1.0
  print "
  print "this\ ift?
  goto "here
  while :var [ignore 5 + 8]
  until :var [ignore 8 + 12]
  do.while :var [ignore 13 + 16]
  do.until :var [ignore 25 + 28]
  tag "here
  ift [safe bf :arguments]
  print "or\ iff?
  iff [display [Hello  World! [note: list of list and output "here :thing]]]
END PROGRAM

to safe :msg
  print "BEFORE\ CATCH
  catch "test [display :msg]
  print "AFTER\ CATCH time
  if errorp [show error]
  forever [type ". if repcount >= 10 [stop]]
  for [:a :global 5 * 2 -0.3] [print "+]
  print "
end safe

to display :msg [:unused 5] [:rest] 2
  repeat 10 - 1 [type  word "- repcount]
  print "-
  print :msg "MORE sqrt -21 + callfunction :box [["x (thing :redirect) * 2]] [Info] first [a b c]
  iftrue [stop]
  repeat 2 * 2 [type "-]
  print "-
  bye 5
end display

to square :x
  if :x < 0 [throw "test]
  if :x = 0 [output 0]
  op :x * :x
end "square

procedure varchange :variablename
  print [The change "to variable] (word "" :variablename "") ["->] thing :variablename [was detected!]
  if and :variablename = "global :global > 200 [make "global 200]
end varchange
